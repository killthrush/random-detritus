<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NServiceBus.NHibernate</name>
    </assembly>
    <members>
        <member name="T:NServiceBus.ConfigureNHibernateGatewayDeduplication">
            <summary>
            Configuration extensions for the NHibernate Gateway deduplication
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureNHibernateGatewayDeduplication.UseNHibernateGatewayDeduplication(NServiceBus.Configure)">
            <summary>
            Configures NHibernate Gateway deduplication.
            </summary>
            <remarks>
            Reads configuration settings from <a href="http://msdn.microsoft.com/en-us/library/ms228154.aspx">&lt;appSettings&gt; config section</a> and <a href="http://msdn.microsoft.com/en-us/library/bf7sd233">&lt;connectionStrings&gt; config section</a>.
            </remarks>
            <example>
            An example that shows the minimum configuration:
            <code lang="XML" escaped="true">
             <appSettings>
               <!-- optional settings examples -->
               <add key="NServiceBus/Persistence/NHibernate/connection.provider" value="NHibernate.Connection.DriverConnectionProvider"/>
               <add key="NServiceBus/Persistence/NHibernate/connection.driver_class" value="NHibernate.Driver.Sql2008ClientDriver"/>
               <!-- For more setting see http://www.nhforge.org/doc/nh/en/#configuration-hibernatejdbc and http://www.nhforge.org/doc/nh/en/#configuration-optional -->
             </appSettings>
             
             <connectionStrings>
               <!-- Default connection string for all persisters -->
               <add name="NServiceBus/Persistence/NHibernate" connectionString="Data Source=.\SQLEXPRESS;Initial Catalog=nservicebus;Integrated Security=True" />
               
               <!-- Optional overrides per persister -->
               <add name="NServiceBus/Persistence/NHibernate/Deduplication" connectionString="Data Source=.\SQLEXPRESS;Initial Catalog=gateway;Integrated Security=True" />
             </connectionStrings>
            </code>
            </example>
            <param name="config">The configuration object.</param>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:NServiceBus.ConfigureNHibernateGatewayDeduplication.UseNHibernateGatewayDeduplication(NServiceBus.Configure,NHibernate.Cfg.Configuration)">
            <summary>
            Configures the storage with the user supplied persistence configuration.
            </summary>
            <param name="config">The configuration object.</param>
            <param name="configuration">The <see cref="T:NHibernate.Cfg.Configuration"/> object.</param>
            <returns>The configuration object</returns>
        </member>
        <member name="M:NServiceBus.ConfigureNHibernateGatewayDeduplication.DisableNHibernateGatewayDeduplicationInstall(NServiceBus.Configure)">
            <summary>
            Disables the automatic creation of the database schema.
            </summary>
            <param name="config">The configuration object.</param>
            <returns>The configuration object.</returns>
        </member>
        <member name="T:NServiceBus.ConfigureNHibernateGatewayPersister">
            <summary>
            Configuration extensions for the NHibernate Gateway persister
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureNHibernateGatewayPersister.UseNHibernateGatewayPersister(NServiceBus.Configure)">
            <summary>
            Configures NHibernate Gateway Persister.
            </summary>
            <remarks>
            Reads configuration settings from <a href="http://msdn.microsoft.com/en-us/library/ms228154.aspx">&lt;appSettings&gt; config section</a> and <a href="http://msdn.microsoft.com/en-us/library/bf7sd233">&lt;connectionStrings&gt; config section</a>.
            </remarks>
            <example>
            An example that shows the minimum configuration:
            <code lang="XML" escaped="true">
             <appSettings>
               <!-- optional settings examples -->
               <add key="NServiceBus/Persistence/NHibernate/connection.provider" value="NHibernate.Connection.DriverConnectionProvider"/>
               <add key="NServiceBus/Persistence/NHibernate/connection.driver_class" value="NHibernate.Driver.Sql2008ClientDriver"/>
               <!-- For more setting see http://www.nhforge.org/doc/nh/en/#configuration-hibernatejdbc and http://www.nhforge.org/doc/nh/en/#configuration-optional -->
             </appSettings>
             
             <connectionStrings>
               <!-- Default connection string for all persisters -->
               <add name="NServiceBus/Persistence/NHibernate" connectionString="Data Source=.\SQLEXPRESS;Initial Catalog=nservicebus;Integrated Security=True" />
               
               <!-- Optional overrides per persister -->
               <add name="NServiceBus/Persistence/NHibernate/Gateway" connectionString="Data Source=.\SQLEXPRESS;Initial Catalog=gateway;Integrated Security=True" />
             </connectionStrings>
            </code>
            </example>
            <param name="config">The configuration object.</param>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:NServiceBus.ConfigureNHibernateGatewayPersister.UseNHibernateGatewayPersister(NServiceBus.Configure,NHibernate.Cfg.Configuration)">
            <summary>
            Configures the storage with the user supplied persistence configuration.
            </summary>
            <param name="config">The configuration object.</param>
            <param name="configuration">The <see cref="T:NHibernate.Cfg.Configuration"/> object.</param>
            <returns>The configuration object</returns>
        </member>
        <member name="M:NServiceBus.ConfigureNHibernateGatewayPersister.DisableNHibernateGatewayPersisterInstall(NServiceBus.Configure)">
            <summary>
            Disables the automatic creation of the database schema.
            </summary>
            <param name="config">The configuration object.</param>
            <returns>The configuration object.</returns>
        </member>
        <member name="T:NServiceBus.ConfigureNHibernateSagaPersister">
            <summary>
            Contains extension methods to NServiceBus.Configure for the NHibernate saga persister.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureNHibernateSagaPersister.UseNHibernateSagaPersister(NServiceBus.Configure)">
            <summary>
            Configures NHibernate Saga Persister.
            </summary>
            <remarks>
            Reads configuration settings from <a href="http://msdn.microsoft.com/en-us/library/ms228154.aspx">&lt;appSettings&gt; config section</a> and <a href="http://msdn.microsoft.com/en-us/library/bf7sd233">&lt;connectionStrings&gt; config section</a>.
            </remarks>
            <example>
            An example that shows the minimum configuration:
            <code lang="XML" escaped="true">
             <appSettings>
               <!-- other optional settings examples -->
               <add key="NServiceBus/Persistence/NHibernate/connection.provider" value="NHibernate.Connection.DriverConnectionProvider"/>
               <add key="NServiceBus/Persistence/NHibernate/connection.driver_class" value="NHibernate.Driver.Sql2008ClientDriver"/>
               <!-- For more setting see http://www.nhforge.org/doc/nh/en/#configuration-hibernatejdbc and http://www.nhforge.org/doc/nh/en/#configuration-optional -->
             </appSettings>
             
             <connectionStrings>
               <!-- Default connection string for all persisters -->
               <add name="NServiceBus/Persistence/NHibernate" connectionString="Data Source=.\SQLEXPRESS;Initial Catalog=nservicebus;Integrated Security=True" />
               
               <!-- Optional overrides per persister -->
               <add name="NServiceBus/Persistence/NHibernate/Saga" connectionString="Data Source=.\SQLEXPRESS;Initial Catalog=sagas;Integrated Security=True" />
             </connectionStrings>
            </code>
            </example>
            <param name="config">The configuration object.</param>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:NServiceBus.ConfigureNHibernateSagaPersister.UseNHibernateSagaPersister(NServiceBus.Configure,NHibernate.Cfg.Configuration)">
            <summary>
            Configures the storage with the user supplied persistence configuration
            DB schema is updated if requested by the user
            </summary>
            <param name="config">The <see cref="T:NServiceBus.Configure"/> object.</param>
            <param name="configuration">The <see cref="T:NHibernate.Cfg.Configuration"/> allows the application to specify properties and mapping documents to be used when creating a <see cref="T:NHibernate.ISessionFactory"/>.</param>
            <returns>The <see cref="T:NServiceBus.Configure"/> object.</returns>
        </member>
        <member name="M:NServiceBus.ConfigureNHibernateSagaPersister.NHibernateSagaPersister(NServiceBus.Configure)">
            <summary>
            Use the NHibernate backed saga persister implementation.
            Be aware that this implementation deletes sagas that complete so as not to have the database fill up.
            SagaData classes are automatically mapped using Fluent NHibernate Conventions.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureNHibernateSagaPersister.NHibernateSagaPersisterWithSQLiteAndAutomaticSchemaGeneration(NServiceBus.Configure)">
            <summary>
            Use the NHibernate backed saga persister implementation on top of SQLite.
            SagaData classes are automatically mapped using Fluent NHibernate conventions
            and there persistence schema is also automatically generated.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureNHibernateSagaPersister.NHibernateSagaPersister(NServiceBus.Configure,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)">
            <summary>
            Use the NHibernate backed saga persister implementation.
            SagaData classes are automatically mapped using Fluent NHibernate conventions
            and there persistence schema is automatically generated if requested.
            </summary>
        </member>
        <member name="T:NServiceBus.ConfigureNHibernateSubscriptionStorage">
            <summary>
            Configuration extensions for the NHibernate subscription storage
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureNHibernateSubscriptionStorage.UseNHibernateSubscriptionPersister(NServiceBus.Configure)">
            <summary>
            Configures NHibernate Subscription Persister.
            </summary>
            <remarks>
            Reads configuration settings from <a href="http://msdn.microsoft.com/en-us/library/ms228154.aspx">&lt;appSettings&gt; config section</a> and <a href="http://msdn.microsoft.com/en-us/library/bf7sd233">&lt;connectionStrings&gt; config section</a>.
            </remarks>
            <example>
            An example that shows the minimum configuration:
            <code lang="XML" escaped="true">
             <appSettings>
               <!-- other optional settings examples -->
               <add key="NServiceBus/Persistence/NHibernate/connection.provider" value="NHibernate.Connection.DriverConnectionProvider"/>
               <add key="NServiceBus/Persistence/NHibernate/connection.driver_class" value="NHibernate.Driver.Sql2008ClientDriver"/>
               <!-- For more setting see http://www.nhforge.org/doc/nh/en/#configuration-hibernatejdbc and http://www.nhforge.org/doc/nh/en/#configuration-optional -->
             </appSettings>
             
             <connectionStrings>
               <!-- Default connection string for all persisters -->
               <add name="NServiceBus/Persistence/NHibernate" connectionString="Data Source=.\SQLEXPRESS;Initial Catalog=nservicebus;Integrated Security=True" />
               
               <!-- Optional overrides per persister -->
               <add name="NServiceBus/Persistence/NHibernate/Subscription" connectionString="Data Source=.\SQLEXPRESS;Initial Catalog=subscription;Integrated Security=True" />
             </connectionStrings>
            </code>
            </example>
            <param name="config">The configuration object.</param>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:NServiceBus.ConfigureNHibernateSubscriptionStorage.UseNHibernateSubscriptionPersister(NServiceBus.Configure,NHibernate.Cfg.Configuration)">
            <summary>
            Configures the storage with the user supplied persistence configuration
            DB schema is updated if requested by the user
            </summary>
            <param name="config">The <see cref="T:NServiceBus.Configure"/> object.</param>
            <param name="configuration">The <see cref="T:NHibernate.Cfg.Configuration"/> allows the application to specify properties and mapping documents to be used when creating a <see cref="T:NHibernate.ISessionFactory"/>.</param>
            <returns>The <see cref="T:NServiceBus.Configure"/> object.</returns>
        </member>
        <member name="M:NServiceBus.ConfigureNHibernateSubscriptionStorage.DisableNHibernateSubscriptionPersisterInstall(NServiceBus.Configure)">
            <summary>
            Disables the automatic creation of the database schema.
            </summary>
            <param name="config">The configuration object.</param>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:NServiceBus.ConfigureNHibernateSubscriptionStorage.DBSubcriptionStorageWithSQLiteAndAutomaticSchemaGeneration(NServiceBus.Configure)">
            <summary>
            Configures the storage with Sqlite as DB and auto generates schema on startup
            </summary>
            <param name="config">The <see cref="T:NServiceBus.Configure"/> object.</param>
            <returns>The <see cref="T:NServiceBus.Configure"/> object.</returns>
        </member>
        <member name="M:NServiceBus.ConfigureNHibernateSubscriptionStorage.DBSubcriptionStorage(NServiceBus.Configure,NHibernate.Cfg.Configuration,System.Boolean)">
            <summary>
            Configures the storage with the user supplied persistence configuration
            DB schema is updated if requested by the user
            </summary>
            <param name="config">The <see cref="T:NServiceBus.Configure"/> object.</param>
            <param name="configuration">The <see cref="T:NHibernate.Cfg.Configuration"/> allows the application to specify properties and mapping documents to be used when creating a <see cref="T:NHibernate.ISessionFactory"/>.</param>
            <param name="autoUpdateSchema"><value>True</value> to auto update the database schema.</param>
            <returns>The <see cref="T:NServiceBus.Configure"/> object.</returns>
        </member>
        <member name="M:NServiceBus.ConfigureNHibernateSubscriptionStorage.DBSubcriptionStorage(NServiceBus.Configure)">
            <summary>
            Configures DB Subscription Storage.
            Database settings are read from custom config section <see cref="T:NServiceBus.Config.DBSubscriptionStorageConfig"/>.
            </summary>
            <param name="config">The <see cref="T:NServiceBus.Configure"/> object.</param>
            <returns>The <see cref="T:NServiceBus.Configure"/> object.</returns>
        </member>
        <member name="T:NServiceBus.ConfigureNHibernateTimeoutPersister">
            <summary>
            Configuration extensions for the NHibernate Timeouts persister
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureNHibernateTimeoutPersister.UseNHibernateTimeoutPersister(NServiceBus.Configure)">
            <summary>
            Configures NHibernate Timeout Persister.
            </summary>
            <remarks>
            Reads configuration settings from <a href="http://msdn.microsoft.com/en-us/library/ms228154.aspx">&lt;appSettings&gt; config section</a> and <a href="http://msdn.microsoft.com/en-us/library/bf7sd233">&lt;connectionStrings&gt; config section</a>.
            </remarks>
            <example>
            An example that shows the minimum configuration:
            <code lang="XML" escaped="true">
             <appSettings>
               <!-- other optional settings examples -->
               <add key="NServiceBus/Persistence/NHibernate/connection.provider" value="NHibernate.Connection.DriverConnectionProvider"/>
               <add key="NServiceBus/Persistence/NHibernate/connection.driver_class" value="NHibernate.Driver.Sql2008ClientDriver"/>
               <!-- For more setting see http://www.nhforge.org/doc/nh/en/#configuration-hibernatejdbc and http://www.nhforge.org/doc/nh/en/#configuration-optional -->
             </appSettings>
             
             <connectionStrings>
               <!-- Default connection string for all persisters -->
               <add name="NServiceBus/Persistence/NHibernate" connectionString="Data Source=.\SQLEXPRESS;Initial Catalog=nservicebus;Integrated Security=True" />
               
               <!-- Optional overrides per persister -->
               <add name="NServiceBus/Persistence/NHibernate/Timeout" connectionString="Data Source=.\SQLEXPRESS;Initial Catalog=timeout;Integrated Security=True" />
             </connectionStrings>
            </code>
            </example>
            <param name="config">The configuration object.</param>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:NServiceBus.ConfigureNHibernateTimeoutPersister.UseNHibernateTimeoutPersister(NServiceBus.Configure,NHibernate.Cfg.Configuration,System.Boolean)">
            <summary>
            Configures the storage with the user supplied persistence configuration.
            Database schema is updated if requested by the user.
            </summary>
            <param name="config">The configuration object.</param>
            <param name="configuration">The <see cref="T:NHibernate.Cfg.Configuration"/> object.</param>
            <param name="autoUpdateSchema"><value>true</value> to auto update schema</param>
            <returns>The configuration object</returns>
        </member>
        <member name="M:NServiceBus.ConfigureNHibernateTimeoutPersister.DisableNHibernateTimeoutPersisterInstall(NServiceBus.Configure)">
            <summary>
            Disables the automatic creation of the database schema.
            </summary>
            <param name="config">The configuration object.</param>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:NServiceBus.ConfigureNHibernateTimeoutPersister.UseNHibernateTimeoutPersisterWithSQLiteAndAutomaticSchemaGeneration(NServiceBus.Configure)">
            <summary>
            Configures the persister with Sqlite as its database and auto generates schema on startup.
            </summary>
            <param name="config">The configuration object.</param>
            <returns>The configuration object.</returns>
        </member>
        <member name="T:NServiceBus.ConfigureNHibernateUnitOfWork">
            <summary>
            Contains extension methods to NServiceBus.Configure for the NHibernate unit of work manager.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureNHibernateUnitOfWork.NHibernateUnitOfWork(NServiceBus.Configure)">
            <summary>
            Use the NHibernate backed unit of work implementation.
            </summary>
        </member>
        <member name="T:NServiceBus.Config.NHibernateProperty">
            <summary>
            A NHibernate property
            </summary>
        </member>
        <member name="P:NServiceBus.Config.NHibernateProperty.Key">
            <summary>
            The key
            </summary>
        </member>
        <member name="P:NServiceBus.Config.NHibernateProperty.Value">
            <summary>
            The value to use
            </summary>
        </member>
        <member name="T:NServiceBus.Config.NHibernatePropertyCollection">
            <summary>
            Collection of NHibernate properties
            </summary>
        </member>
        <member name="M:NServiceBus.Config.NHibernatePropertyCollection.CreateNewElement">
            <summary>
            Creates a new empty property
            </summary>
        </member>
        <member name="M:NServiceBus.Config.NHibernatePropertyCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Returns the key for the given element
            </summary>
        </member>
        <member name="M:NServiceBus.Config.NHibernatePropertyCollection.ToProperties">
            <summary>
            Converts the collection to a dictionary
            </summary>
        </member>
        <member name="T:NServiceBus.Config.NHibernateSagaPersisterConfig">
            <summary>
            Config section for the NHibernate Saga Persister
            </summary>
        </member>
        <member name="P:NServiceBus.Config.NHibernateSagaPersisterConfig.NHibernateProperties">
            <summary>
            Collection of NHibernate properties to set
            </summary>
        </member>
        <member name="P:NServiceBus.Config.NHibernateSagaPersisterConfig.UpdateSchema">
            <summary>
            ´Determines if the database should be auto updated
            </summary>
        </member>
        <member name="T:NServiceBus.Config.TimeoutPersisterConfig">
            <summary>
            Represents the configuration section for Timeout Persister.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.TimeoutPersisterConfig.NHibernateProperties">
            <summary>
            Collection of NHibernate properties.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.TimeoutPersisterConfig.UpdateSchema">
            <summary>
            <value>true</value> to update database schema.
            </summary>
        </member>
        <member name="T:NServiceBus.Deduplication.NHibernate.Config.DeduplicationMessage">
            <summary>
            The Gateway message
            </summary>
        </member>
        <member name="P:NServiceBus.Deduplication.NHibernate.Config.DeduplicationMessage.Id">
            <summary>
            Id of this message.
            </summary>
        </member>
        <member name="P:NServiceBus.Deduplication.NHibernate.Config.DeduplicationMessage.TimeReceived">
            <summary>
            The time at which the message was received.
            </summary>
        </member>
        <member name="T:NServiceBus.Deduplication.NHibernate.Config.DeduplicationMessageMap">
            <summary>
            Deduplication message mapping class.
            </summary>
        </member>
        <member name="M:NServiceBus.Deduplication.NHibernate.Config.DeduplicationMessageMap.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:NServiceBus.Deduplication.NHibernate.GatewayDeduplication">
            <summary>
            NHibernate Gateway deduplication
            </summary>
        </member>
        <member name="M:NServiceBus.Deduplication.NHibernate.GatewayDeduplication.DeduplicateMessage(System.String,System.DateTime)">
            <summary>
            Adds a new message
            </summary>
            <param name="clientId">Client to add</param>
            <param name="timeReceived">Time the message was received</param>
            <returns><value>true</value> if successfully added.</returns>
        </member>
        <member name="P:NServiceBus.Deduplication.NHibernate.GatewayDeduplication.SessionFactory">
            <summary>
            Creates <c>ISession</c>s.
            </summary>
        </member>
        <member name="T:NServiceBus.Deduplication.NHibernate.Installer.Installer">
            <summary>
            Installer for <see cref="N:NServiceBus.Deduplication"/>
            </summary>
        </member>
        <member name="M:NServiceBus.Deduplication.NHibernate.Installer.Installer.Install(System.String)">
            <summary>
            Executes the installer.
            </summary>
            <param name="identity">The user for whom permissions will be given.</param>
        </member>
        <member name="P:NServiceBus.Deduplication.NHibernate.Installer.Installer.RunInstaller">
            <summary>
            <value>true</value> to run installer.
            </summary>
        </member>
        <member name="T:NServiceBus.GatewayPersister.NHibernate.Config.GatewayMessage">
            <summary>
            The Gateway message
            </summary>
        </member>
        <member name="P:NServiceBus.GatewayPersister.NHibernate.Config.GatewayMessage.Id">
            <summary>
            Id of this message.
            </summary>
        </member>
        <member name="P:NServiceBus.GatewayPersister.NHibernate.Config.GatewayMessage.Headers">
            <summary>
            Store the headers to preserve them across timeouts.
            </summary>
        </member>
        <member name="P:NServiceBus.GatewayPersister.NHibernate.Config.GatewayMessage.TimeReceived">
            <summary>
            The time at which the message was received.
            </summary>
        </member>
        <member name="P:NServiceBus.GatewayPersister.NHibernate.Config.GatewayMessage.OriginalMessage">
            <summary>
            The original message.
            </summary>
        </member>
        <member name="P:NServiceBus.GatewayPersister.NHibernate.Config.GatewayMessage.Acknowledged">
            <summary>
            Acknowledgment that the message was successfully received.
            </summary>
        </member>
        <member name="T:NServiceBus.GatewayPersister.NHibernate.Config.GatewayMessageMap">
            <summary>
            Gateway message mapping class.
            </summary>
        </member>
        <member name="M:NServiceBus.GatewayPersister.NHibernate.Config.GatewayMessageMap.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:NServiceBus.GatewayPersister.NHibernate.GatewayPersister">
            <summary>
            NHibernate Gateway persister;
            </summary>
        </member>
        <member name="M:NServiceBus.GatewayPersister.NHibernate.GatewayPersister.InsertMessage(System.String,System.DateTime,System.IO.Stream,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Adds a new message.
            </summary>
            <param name="clientId">Client to add.</param>
            <param name="timeReceived">Time the message was received</param>
            <param name="message">The original message.</param>
            <param name="headers">The headers.</param>
            <returns><value>true</value> if successfully added.</returns>
        </member>
        <member name="M:NServiceBus.GatewayPersister.NHibernate.GatewayPersister.AckMessage(System.String,System.Byte[]@,System.Collections.Generic.IDictionary{System.String,System.String}@)">
            <summary>
            Update the acknowledged flag.
            </summary>
            <param name="clientId">Client to update.</param>
            <param name="message">The original message.</param>
            <param name="headers">The headers.</param>
            <returns><value>true</value> if successfully updated.</returns>
        </member>
        <member name="M:NServiceBus.GatewayPersister.NHibernate.GatewayPersister.UpdateHeader(System.String,System.String,System.String)">
            <summary>
            Updates the header value.
            </summary>
            <param name="clientId">Client to update the header value for.</param>
            <param name="headerKey">Header key.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="P:NServiceBus.GatewayPersister.NHibernate.GatewayPersister.SessionFactory">
            <summary>
            Creates <c>ISession</c>s.
            </summary>
        </member>
        <member name="T:NServiceBus.GatewayPersister.NHibernate.Installer.Installer">
            <summary>
            Installer for <see cref="T:NServiceBus.GatewayPersister.NHibernate.GatewayPersister"/>
            </summary>
        </member>
        <member name="M:NServiceBus.GatewayPersister.NHibernate.Installer.Installer.Install(System.String)">
            <summary>
            Executes the installer.
            </summary>
            <param name="identity">The user for whom permissions will be given.</param>
        </member>
        <member name="P:NServiceBus.GatewayPersister.NHibernate.Installer.Installer.RunInstaller">
            <summary>
            <value>true</value> to run installer.
            </summary>
        </member>
        <member name="T:NServiceBus.Persistence.NHibernate.ConfigureNHibernate">
            <summary>
            Helper class to configure NHibernate persisters.
            </summary>
        </member>
        <member name="M:NServiceBus.Persistence.NHibernate.ConfigureNHibernate.Init">
            <summary>
            Initializes the <see cref="T:NServiceBus.Persistence.NHibernate.ConfigureNHibernate"/> NHibernate properties.
            </summary>
            <remarks>
            Configure NHibernate using the <c>&lt;hibernate-configuration&gt;</c> section
            from the application config file, if found, or the file <c>hibernate.cfg.xml</c> if the
            <c>&lt;hibernate-configuration&gt;</c> section not include the session-factory configuration.
            However those settings can be overwritten by our own configuration settings if specified.
            </remarks>
        </member>
        <member name="M:NServiceBus.Persistence.NHibernate.ConfigureNHibernate.AddMappings``1(NHibernate.Cfg.Configuration)">
            <summary>
            Adds T mapping to <paramref name="configuration"/> .
            </summary>
            <typeparam name="T">The mapping class.</typeparam>
            <param name="configuration">The existing <see cref="T:NHibernate.Cfg.Configuration"/>.</param>
        </member>
        <member name="M:NServiceBus.Persistence.NHibernate.ConfigureNHibernate.ThrowIfRequiredPropertiesAreMissing(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Validates minimum required NHibernate properties.
            </summary>
            <param name="props">Properties to validate.</param>
        </member>
        <member name="M:NServiceBus.Persistence.NHibernate.ConfigureNHibernate.ConfigureSqlLiteIfRunningInDebugModeAndNoConfigPropertiesSet(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            It ensures that in DEBUG mode SqlLite is configured if no other settings are specified.
            </summary>
            <param name="properties">The properties to use.</param>
        </member>
        <member name="M:NServiceBus.Persistence.NHibernate.ConfigureNHibernate.CreateConfigurationWith(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Created and initializes a <see cref="T:NHibernate.Cfg.Configuration"/> based on <paramref name="properties"/> specified.
            </summary>
            <param name="properties">The properties to use.</param>
            <returns>A properly initialized <see cref="T:NHibernate.Cfg.Configuration"/>.</returns>
        </member>
        <member name="P:NServiceBus.Persistence.NHibernate.ConfigureNHibernate.TimeoutPersisterProperties">
            <summary>
            Timeout persister NHibernate properties.
            </summary>
        </member>
        <member name="P:NServiceBus.Persistence.NHibernate.ConfigureNHibernate.SubscriptionStorageProperties">
            <summary>
            Subscription persister NHibernate properties.
            </summary>
        </member>
        <member name="P:NServiceBus.Persistence.NHibernate.ConfigureNHibernate.SagaPersisterProperties">
            <summary>
            Saga persister NHibernate properties.
            </summary>
        </member>
        <member name="P:NServiceBus.Persistence.NHibernate.ConfigureNHibernate.GatewayPersisterProperties">
            <summary>
            Gateway persister NHibernate properties.
            </summary>
        </member>
        <member name="P:NServiceBus.Persistence.NHibernate.ConfigureNHibernate.GatewayDeduplicationProperties">
            <summary>
            Gateway deduplication NHibernate properties.
            </summary>
        </member>
        <member name="P:NServiceBus.Persistence.NHibernate.ConfigureNHibernate.DistributorPersisterProperties">
            <summary>
            Distributor persister NHibernate properties.
            </summary>
        </member>
        <member name="T:NServiceBus.Persistence.NHibernate.NHibernateSettingRetriever">
            <summary>
            Abstraction of a source of configuration data.
            </summary>
        </member>
        <member name="P:NServiceBus.Persistence.NHibernate.NHibernateSettingRetriever.AppSettings">
            <summary>
            Gets the <see cref="T:System.Configuration.AppSettingsSection"/> data for the current application's default configuration.
            </summary>
        </member>
        <member name="P:NServiceBus.Persistence.NHibernate.NHibernateSettingRetriever.ConnectionStrings">
            <summary>
            Gets the <see cref="T:System.Configuration.ConnectionStringsSection"/> data for the current application's default configuration.
            </summary>
        </member>
        <member name="T:NServiceBus.SagaPersisters.NHibernate.Config.Installer.Installer">
            <summary>
            Installer for <see cref="T:NServiceBus.SagaPersisters.NHibernate.SagaPersister"/>
            </summary>
        </member>
        <member name="M:NServiceBus.SagaPersisters.NHibernate.Config.Installer.Installer.Install(System.String)">
            <summary>
            Executes the installer.
            </summary>
            <param name="identity">The user for whom permissions will be given.</param>
        </member>
        <member name="P:NServiceBus.SagaPersisters.NHibernate.Config.Installer.Installer.RunInstaller">
            <summary>
            <value>true</value> to run installer.
            </summary>
        </member>
        <member name="T:NServiceBus.SagaPersisters.NHibernate.Config.Internal.SessionFactoryBuilder">
            <summary>
            Builder class for the NHibernate Session Factory
            </summary>
        </member>
        <member name="M:NServiceBus.SagaPersisters.NHibernate.Config.Internal.SessionFactoryBuilder.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Constructor that accepts the types to scan for saga data classes
            </summary>
        </member>
        <member name="M:NServiceBus.SagaPersisters.NHibernate.Config.Internal.SessionFactoryBuilder.Build(NHibernate.Cfg.Configuration)">
            <summary>
            Builds the session factory with the given properties. Database is updated if updateSchema is set
            </summary>
        </member>
        <member name="T:NServiceBus.SagaPersisters.NHibernate.SagaPersister">
            <summary>
            Saga persister implementation using NHibernate.
            </summary>
        </member>
        <member name="M:NServiceBus.SagaPersisters.NHibernate.SagaPersister.Save(NServiceBus.Saga.IContainSagaData)">
            <summary>
            Saves the given saga entity using the current session of the
            injected session factory.
            </summary>
            <param name="saga">the saga entity that will be saved.</param>
        </member>
        <member name="M:NServiceBus.SagaPersisters.NHibernate.SagaPersister.Update(NServiceBus.Saga.IContainSagaData)">
            <summary>
            Updates the given saga entity using the current session of the
            injected session factory.
            </summary>
            <param name="saga">the saga entity that will be updated.</param>
        </member>
        <member name="M:NServiceBus.SagaPersisters.NHibernate.SagaPersister.Get``1(System.Guid)">
            <summary>
            Gets a saga entity from the injected session factory's current session
            using the given saga id.
            </summary>
            <param name="sagaId">The saga id to use in the lookup.</param>
            <returns>The saga entity if found, otherwise null.</returns>
        </member>
        <member name="M:NServiceBus.SagaPersisters.NHibernate.SagaPersister.Complete(NServiceBus.Saga.IContainSagaData)">
            <summary>
            Deletes the given saga from the injected session factory's
            current session.
            </summary>
            <param name="saga">The saga entity that will be deleted.</param>
        </member>
        <member name="P:NServiceBus.SagaPersisters.NHibernate.SagaPersister.UnitOfWorkManager">
            <summary>
            Injected unit of work manager.
            </summary>
        </member>
        <member name="T:NServiceBus.TimeoutPersisters.NHibernate.Config.TimeoutEntityMap">
            <summary>
            Timeout entity map class
            </summary>
        </member>
        <member name="M:NServiceBus.TimeoutPersisters.NHibernate.Config.TimeoutEntityMap.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:NServiceBus.TimeoutPersisters.NHibernate.Installer.Installer">
            <summary>
            Installer for <see cref="T:NServiceBus.TimeoutPersisters.NHibernate.TimeoutStorage"/>
            </summary>
        </member>
        <member name="M:NServiceBus.TimeoutPersisters.NHibernate.Installer.Installer.Install(System.String)">
            <summary>
            Executes the installer.
            </summary>
            <param name="identity">The user for whom permissions will be given.</param>
        </member>
        <member name="P:NServiceBus.TimeoutPersisters.NHibernate.Installer.Installer.RunInstaller">
            <summary>
            <value>true</value> to run installer.
            </summary>
        </member>
        <member name="T:NServiceBus.TimeoutPersisters.NHibernate.TimeoutEntity">
            <summary>
            NHibernate wrapper class for <see cref="T:NServiceBus.Timeout.Core.TimeoutData"/>
            </summary>
        </member>
        <member name="P:NServiceBus.TimeoutPersisters.NHibernate.TimeoutEntity.Id">
            <summary>
            Id of this timeout.
            </summary>
        </member>
        <member name="P:NServiceBus.TimeoutPersisters.NHibernate.TimeoutEntity.Destination">
            <summary>
            The address of the client who requested the timeout.
            </summary>
        </member>
        <member name="P:NServiceBus.TimeoutPersisters.NHibernate.TimeoutEntity.SagaId">
            <summary>
            The saga ID.
            </summary>
        </member>
        <member name="P:NServiceBus.TimeoutPersisters.NHibernate.TimeoutEntity.State">
            <summary>
            Additional state.
            </summary>
        </member>
        <member name="P:NServiceBus.TimeoutPersisters.NHibernate.TimeoutEntity.Time">
            <summary>
            The time at which the saga ID expired.
            </summary>
        </member>
        <member name="P:NServiceBus.TimeoutPersisters.NHibernate.TimeoutEntity.CorrelationId">
            <summary>
            We store the correlation id in order to preserve it across timeouts.
            </summary>
        </member>
        <member name="P:NServiceBus.TimeoutPersisters.NHibernate.TimeoutEntity.Headers">
            <summary>
            Store the headers to preserve them across timeouts.
            </summary>
        </member>
        <member name="P:NServiceBus.TimeoutPersisters.NHibernate.TimeoutEntity.Endpoint">
            <summary>
            Timeout endpoint name.
            </summary>
        </member>
        <member name="T:NServiceBus.TimeoutPersisters.NHibernate.TimeoutStorage">
            <summary>
            Timeout storage implementation for NHibernate.
            </summary>
        </member>
        <member name="M:NServiceBus.TimeoutPersisters.NHibernate.TimeoutStorage.GetNextChunk(System.DateTime,System.DateTime@)">
            <summary>
            Retrieves the next range of timeouts that are due.
            </summary>
            <param name="startSlice">The time where to start retrieving the next slice, the slice should exclude this date.</param>
            <param name="nextTimeToRunQuery">Returns the next time we should query again.</param>
            <returns>Returns the next range of timeouts that are due.</returns>
        </member>
        <member name="M:NServiceBus.TimeoutPersisters.NHibernate.TimeoutStorage.Add(NServiceBus.Timeout.Core.TimeoutData)">
            <summary>
            Adds a new timeout.
            </summary>
            <param name="timeout">Timeout data.</param>
        </member>
        <member name="M:NServiceBus.TimeoutPersisters.NHibernate.TimeoutStorage.TryRemove(System.String,NServiceBus.Timeout.Core.TimeoutData@)">
            <summary>
            Removes the timeout if it hasn't been previously removed.
            </summary>
            <param name="timeoutId">The timeout id to remove.</param>
            <param name="timeoutData">The timeout data of the removed timeout.</param>
            <returns><c>true</c> it the timeout was successfully removed.</returns>
        </member>
        <member name="M:NServiceBus.TimeoutPersisters.NHibernate.TimeoutStorage.RemoveTimeoutBy(System.Guid)">
            <summary>
            Removes the time by saga id.
            </summary>
            <param name="sagaId">The saga id of the timeouts to remove.</param>
        </member>
        <member name="P:NServiceBus.TimeoutPersisters.NHibernate.TimeoutStorage.SessionFactory">
            <summary>
            The current <see cref="T:NHibernate.ISessionFactory"/>.
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Subscriptions.NHibernate.Installer.Installer">
            <summary>
            Installer for <see cref="T:NServiceBus.Unicast.Subscriptions.NHibernate.SubscriptionStorage"/>
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Subscriptions.NHibernate.Installer.Installer.Install(System.String)">
            <summary>
            Executes the installer.
            </summary>
            <param name="identity">The user for whom permissions will be given.</param>
        </member>
        <member name="P:NServiceBus.Unicast.Subscriptions.NHibernate.Installer.Installer.RunInstaller">
            <summary>
            <value>true</value> to run installer.
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Subscriptions.NHibernate.Subscription">
            <summary>
            Entity containing subscription data
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Subscriptions.NHibernate.SubscriptionStorage">
            <summary>
            Subscription storage using NHibernate for persistence 
            </summary>
        </member>
        <member name="T:NServiceBus.UnitOfWork.NHibernate.UnitOfWorkManager">
            <summary>
                Implementation of unit of work management with NHibernate
            </summary>
        </member>
        <member name="P:NServiceBus.UnitOfWork.NHibernate.UnitOfWorkManager.SessionFactory">
            <summary>
                Injected NHibernate session factory.
            </summary>
        </member>
    </members>
</doc>
